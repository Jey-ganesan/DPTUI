@using System.Text.Json
@using DPT.MVC.Helper
@inject IConfiguration Configuration

@{
    int decimalRoundOff = Configuration.GetValue<int>("NumberSettings:DecimalRoundOff");
    int t1TBLength = Configuration.GetValue<int>("CharacterSettings:T1TypeTextbox");
    int t2TBLength = Configuration.GetValue<int>("CharacterSettings:T2TypeTextbox");
    int t3TBLength = Configuration.GetValue<int>("CharacterSettings:T3TypeTextbox");
    int t4TBLength = Configuration.GetValue<int>("CharacterSettings:T4TypeTextbox");
    int t5TBLength = Configuration.GetValue<int>("CharacterSettings:T5TypeTextbox");
    string? dateFormat = Configuration.GetValue<string>("Date:dateFormat");
    string mode = ViewBag.mode;
    string url = ViewBag.url;
    int pageId = ViewBag.pageId;
    int userId = Convert.ToInt32(SessionHelper.GetStringValueFromSession(Context, "UserId"));
    string userName = SessionHelper.GetStringValueFromSession(Context, "DisplayName");
}

<head>
    <style>
        /* Center table headings */
        th {
            text-align: center !important;
        }

        /* thead {
                    background-color: #ffc107;
                } */

        .chosen-results {
            background-color: white;
            width: 300px;
        }

        #requestHdrGrid td{
            padding: 0 !important;
            vertical-align: middle;
            horizontal-align: middle;
            text-align: center;
        }

        #requestHdrGrid th {
            white-space:nowrap;
        }
         
        .chosen-search {
            background-color: white;
            width: 300px;
        }

        .chosen-results{
            text-align: left;
        }

        /* #requestHdrGrid tbody tr:nth-child(odd) {
            background-color: #d0d0d0;
        }

        #requestHdrGrid tbody tr:nth-child(even) {
            background-color: #f2f2f2;
        } */
    </style>
</head>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12 mx-auto col-lg-12">
            <div class="card shadow-lg">
                <div class="card-header text-white bg-warning d-flex">
                    <div class="col-lg-4 col-md-6 col-sm-12">
                        <h4 class="text-lg-start">
                            PAYMENT REQUEST
                        </h4>
                    </div>
                    <div class="col-lg-4 col-md-6 col-sm-12">
                        <span class="text-danger"> * Required fields</span>
                    </div>
                    <div class='col-md-4 col-sm-6 col-lg-1'>
                        <a href='#' id="addRowBtn" class='btn btn-outline-primary btn-sm float-sm-center'>
                            Add Row
                        </a>
                    </div>
                    <div class='col-md-4 col-sm-6 col-lg-1'>
                        <a href='#' id="viewrequest" class='btn btn-outline-primary btn-sm float-sm-center'>
                            View Requests
                        </a>
                    </div>
                </div>
                <div class="card-body">
                    <form id="countryForm">
                        <fieldset>
                            <div class="row">
                            </div>
                            <br />
                            <div class="table-container">
                                <table id="requestHdrGrid" class="table">
                                    <thead>
                                        <tr>
                                            <th>DATE<span class="text-danger">*</span></th>
                                            <th>JOB NO<span class="text-danger">*</span></th>
                                            <th>HAWB<span class="text-danger">*</span></th>
                                            <th>CUSTOMER<span class="text-danger">*</span></th>
                                            <th>CHARGES 1<span class="text-danger">*</span></th>
                                            <th>AMOUNT 1<span class="text-danger">*</span></th>
                                            <th>CHARGES 2</th>
                                            <th>AMOUNT 2</th>
                                            <th>TOTAL AMOUNT<span class="text-danger">*</span></th>
                                            <th>REMARKS</th>
                                            <th>BAYAN NO<span class="text-danger">*</span></th>
                                            <th>UPLOAD BAYAN COPY</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                    </tbody>
                                </table>
                            </div>
                        </fieldset>
                    </form>
                    <br />
                    <div class="row">
                        <div class="col-md-4">
                            <button class="btn btn-primary" onclick="SubmitrequestedRecord()">Submit</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">

    $(document).ready(async function () {
        await Customerdata();
        // await Currencydata();
        await Chargesdata();
        for (let i = 0; i < 5; i++) {
            await addRow();
        }
    });

    var CHARGESData;
    var CurrencyData;
    var CustomerData;
    // var initialData = Array(5).fill({});

    async function Chargesdata() {
        CHARGESData = await $.ajax({
            url: '@Url.Action("GetCharges", "MasterCHARGES")',
            type: 'get',
        });
    }

    async function Currencydata() {
        CurrencyData = await $.ajax({
            url: '@Url.Action("GetCurrencies", "MasterCurrencies")',
            type: 'get',
        });
    }

    async function Customerdata() {
        CustomerData = await $.ajax({
            url: '@Url.Action("GetCustomersForRequest", "Customers")',
            type: 'get',
        });
    }

    function addRow() {
        const table = document.querySelector('#requestHdrGrid tbody');
        const newRow = document.createElement('tr');

        newRow.innerHTML = `
                <td><input type="date" name="REQUESTDATE" class="chosen-border form-control rounded-0 date-picker"></td>
                <td><input type="text" name="JOBNO" class="chosen-border form-control rounded-0 maxLengthValidation" maxlength="@t1TBLength"></td>
                <td><input type="text" name="HAWBNO" class="chosen-border form-control rounded-0 maxLengthValidation" maxlength="@t1TBLength"></td>
                <td>
                    <select name="CUSTOMERID" class="status-dropdown chosen-select" style="width: 100px;">
                        <option value="">Select</option>
                        ${CustomerData.map(item => `<option value="${item.id}">${item.name}</option>`).join('')}
                    </select>
                </td>
                <td>
                    <select name="CHARGETYPEID1" class="status-dropdown chosen-select" style="width: 100px;">
                        <option value="">Select</option>
                        ${CHARGESData.map(item => `<option value="${item.id}">${item.type}</option>`).join('')}
                    </select>
                </td>
                <td><input name="AMOUNT1" type="text" name="reviewerComment" oninput="updateTotalAmount1(this);" class="chosen-border form-control rounded-0 maxLengthValidation" maxlength="@t5TBLength"></td>
                <td>
                    <select name="CHARGETYPEID2" class="status-dropdown chosen-select" style="width: 100px;">
                        <option value="">Select</option>
                        ${CHARGESData.map(item => `<option value="${item.id}">${item.type}</option>`).join('')}
                    </select>
                </td>
                <td><input type="text" name="AMOUNT2" oninput="updateTotalAmount2(this);" class="chosen-border form-control rounded-0 maxLengthValidation" maxlength="@t5TBLength"></td>
                <td><input type="text" name="TOTALREQUESTAMOUNT" class="chosen-border form-control rounded-0 maxLengthValidation" maxlength="@t5TBLength"disabled></td>
                <td><input type="text" name="REMARKS1" class="chosen-border form-control rounded-0 maxLengthValidation" maxlength="@t4TBLength"></td>
                <td><input type="text" name="BAYANNO" class="chosen-border form-control rounded-0 maxLengthValidation" maxlength="@t1TBLength"></td>
                <td><input type="file" name="file" class="chosen-border form-control"></td>
            `;

        table.appendChild(newRow);
        $('.chosen-select').chosen();
        $('.chosen-drop').css('width', '310px');
        $('.date-picker').flatpickr({
            dateFormat: "@dateFormat",
            defaultDate: new Date()
        });
        newRow.querySelectorAll('.amount-field').forEach(field => {
            field.addEventListener('input', updateTotalAmount);
        });
    }

    function updateTotalAmount1(inputField) {
        
        const row = inputField.closest('tr');
        const amount1Input = row.querySelector('input[name="AMOUNT1"]');
        const totalAmountInput = row.querySelector('input[name="TOTALREQUESTAMOUNT"]');

        if (amount1Input && totalAmountInput) {
            const amount1 = parseFloat(amount1Input.value) || 0;
            const totalAmount = amount1;
            totalAmountInput.value = totalAmount.toFixed(2);
        } else {
            console.error("One or more input fields not found.");
        }
        inputField.value = inputField.value.replace(/[^\d]/g, '');
    }

    function updateTotalAmount2(inputField) {
        
        const row = inputField.closest('tr');
        const amount1Input = row.querySelector('input[name="AMOUNT1"]');
        const amount2Input = row.querySelector('input[name="AMOUNT2"]');
        const totalAmountInput = row.querySelector('input[name="TOTALREQUESTAMOUNT"]');

        if (amount1Input && amount2Input && totalAmountInput) {
            const amount1 = parseFloat(amount1Input.value) || 0;
            const amount2 = parseFloat(amount2Input.value) || 0;
            const totalAmount = amount1 + amount2;
            totalAmountInput.value = totalAmount.toFixed(2);
        } else {
            console.error("One or more input fields not found.");
        }
        inputField.value = inputField.value.replace(/[^\d]/g, '');
    }

    $('#addRowBtn').on('click', addRow);

    $('#viewrequest').on('click', viewRequest);

    function viewRequest() {
        loadPageWithParams('ViewPaymentrequests')
    }


    function validateForm() {
        let isValid = true;
        const rows = document.querySelectorAll('#requestHdrGrid tbody tr');

        for (let i = 0; i < rows.length; i++) {
            const row = rows[i];
            const customerID = row.querySelector('select[name="CUSTOMERID"]').value;
            const jobNo = row.querySelector('input[name="JOBNO"]').value;
            const bayanNo = row.querySelector('input[name="BAYANNO"]').value;
            const totalAmount = row.querySelector('input[name="TOTALREQUESTAMOUNT"]').value;
            const chargeType1 = row.querySelector('select[name="CHARGETYPEID1"]').value;
            const amount1 = row.querySelector('input[name="AMOUNT1"]').value;

            const charge2 = row.querySelector('select[name="CHARGETYPEID2"]')?.value;
            const amount2 = row.querySelector('input[name="AMOUNT2"]')?.value;

            if (customerID == '' && jobNo == '' && bayanNo == '' && totalAmount == '' && chargeType1 == '' && amount1 == '') {
                row.remove();
            } else {
                if (customerID == '' || jobNo == '' || bayanNo == '' || totalAmount == '' || chargeType1 == '' || amount1 == '') {
                    isValid = false;
                    return isValid;
                } else if (charge2 !== '' && amount2 == '') {
                    isValid = false;
                    return isValid;

                }
            }
        }
        return isValid;
    }


    async function SubmitrequestedRecord() {
        if (!validateForm()) {
            alert('Please fill all the required fields.')
            return;
        }

        // Get all rows in the header table
        const rows = document.querySelectorAll('#requestHdrGrid tbody tr');

        const headers = [];
        const details = [];

        const Validationdata = [];



        rows.forEach(async (row) => {
            const inputs = row.querySelectorAll('input, select');
            let hasValues = false;
            const customerSelect1 = row.querySelector('select[name="CUSTOMERID"]');
            const customerID1 = customerSelect1?.value || '';
            const requestdate = row.querySelector('input[name="REQUESTDATE"]')?.value || '';
            const jobno = row.querySelector('input[name="JOBNO"]')?.value || '';
            const bayanno = row.querySelector('input[name="BAYANNO"]')?.value || '';
            const totalamount = row.querySelector('input[name="TOTALREQUESTAMOUNT"]')?.value || '';
            const charge11 = row.querySelector('select[name="CHARGETYPEID1"]')?.value;
            const amount11 = row.querySelector('input[name="AMOUNT1"]')?.value;

            if (customerID1 !== '' && requestdate !== '' && jobno !== '' && bayanno !== '' && totalamount !== '' && charge11 !== '' && amount11 !== '') {
                hasValues = true;
            } else {
                row.remove();
            }

            if (hasValues) {

                // Gather header data for each row
                const customerSelect = row.querySelector('select[name="CUSTOMERID"]');
                const customerID = customerSelect?.value || '';
                const customerName = customerSelect ? customerSelect.options[customerSelect.selectedIndex].text : '';

                const headerdata = {
                    REQUESTDATE: row.querySelector('input[name="REQUESTDATE"]')?.value || '',
                    JOBNO: row.querySelector('input[name="JOBNO"]')?.value || '',
                    HAWBNO: row.querySelector('input[name="HAWBNO"]')?.value || '',
                    CUSTOMERID: customerID,
                    CUSTOMERNAME: customerName,
                    BAYANNO: row.querySelector('input[name="BAYANNO"]')?.value || '',
                    TOTALREQUESTAMOUNT: row.querySelector('input[name="TOTALREQUESTAMOUNT"]')?.value || '',
                    REMARKS1: row.querySelector('input[name="REMARKS1"]')?.value || '',
                    REQUESTEDBY: '@userName' // Replace with your actual value or logic to get this value
                };

                headers.push(headerdata);
                
                const res1 = await $.ajax({
                    url: '@Url.Action("SaveREQUESTHDR", "REQUESTHDR")',
                    method: 'POST',
                    data: headerdata
                });

                const HDRID = res1.hdrid;

                await uploadFile(HDRID, row);

                // Gather detail data for each row
                const charge1 = row.querySelector('select[name="CHARGETYPEID1"]')?.value;
                const amount1 = row.querySelector('input[name="AMOUNT1"]')?.value;

                if (charge1 && amount1) {
                    
                    var detail1Obj = {
                        HDRID: HDRID, // Will be set after header is saved
                        CHARGETYPEID: charge1,
                        AMOUNT: amount1,
                    };
                    await $.ajax({
                        url: '@Url.Action("SaveREQUESTDTL", "REQUESTDTL")',
                        method: 'POST',
                        data: detail1Obj
                    });
                }
                
                const charge2 = row.querySelector('select[name="CHARGETYPEID2"]')?.value;
                const amount2 = row.querySelector('input[name="AMOUNT2"]')?.value;

                if (charge2 && amount2) {
                    
                    var detail2Obj = {
                        HDRID: HDRID, // Will be set after header is saved
                        CHARGETYPEID: charge2,
                        AMOUNT: amount2,
                    };
                    await $.ajax({
                        url: '@Url.Action("SaveREQUESTDTL", "REQUESTDTL")',
                        method: 'POST',
                        data: detail2Obj
                    });
                }
            }
        });
    }

    async function uploadFile(headerId, row) {

        var fileInput = row.querySelector('input[type="file"]');
        var files = fileInput.files;

        if (files.length === 0) {
            console.log("No files selected for upload.");
            return;
        }

        for (let i = 0; i < files.length; i++) {
            debugger;
            var formData = new FormData();
            formData.append('file', files[i]);
            formData.append('typeId', '1');
            formData.append('transName', 'PaymentRequest');

            try {
                await $.ajax({
                    url: "@Url.Action("SaveFile", "Home")",
                    type: "POST",
                    headers: { 'ProdId': headerId },
                    data: formData,
                    contentType: false,
                    processData: false
                });
                console.log("File uploaded successfully:", files[i].name);
            } catch (error) {
                console.error("Error uploading file:", error);
            }
        }
    }

    // async function SubmitrequestedRecord() {
    //     
    //     if (!validateForm()) {
    //         alert('Please fill all the required fields.')
    //         return;
    //     }

    //     // Get all rows in the header table
    //     const rows = document.querySelectorAll('#requestHdrGrid tbody tr');

    //     const headers = [];

    //     rows.forEach(row => {
    //         const inputs = row.querySelectorAll('input, select');
    //         let hasValues = false;
    //         const customerSelect1 = row.querySelector('select[name="CUSTOMERID"]');
    //         const customerID1 = customerSelect1?.value || '';
    //         const requestdate = row.querySelector('input[name="REQUESTDATE"]')?.value || '';
    //         const jobno = row.querySelector('input[name="JOBNO"]')?.value || '';
    //         const bayanno = row.querySelector('input[name="BAYANNO"]')?.value || '';
    //         const totalamount = row.querySelector('input[name="TOTALREQUESTAMOUNT"]')?.value || '';
    //         const charge11 = row.querySelector('select[name="CHARGETYPEID1"]')?.value;
    //         const amount11 = row.querySelector('input[name="AMOUNT1"]')?.value;

    //         if (customerID1 !== '' && requestdate !== '' && jobno !== '' && bayanno !== '' && totalamount !== '' && charge11 !== '' && amount11 !== '') {
    //             hasValues = true;
    //         } else {
    //             row.remove();
    //         }
    //         
    //         if (hasValues) {
    //             // Gather header data for each row
    //             const customerSelect = row.querySelector('select[name="CUSTOMERID"]');
    //             const customerID = customerSelect?.value || '';
    //             const customerName = customerSelect ? customerSelect.options[customerSelect.selectedIndex].text : '';
    //             const charge1 = row.querySelector('select[name="CHARGETYPEID1"]')?.value;
    //             const amount1 = row.querySelector('input[name="AMOUNT1"]')?.value;
    //             const charge2 = row.querySelector('select[name="CHARGETYPEID2"]')?.value;
    //             const amount2 = row.querySelector('input[name="AMOUNT2"]')?.value;

    //             const headerdata = {
    //                 REQUESTDATE: row.querySelector('input[name="REQUESTDATE"]')?.value || '',
    //                 JOBNO: row.querySelector('input[name="JOBNO"]')?.value || '',
    //                 HAWBNO: row.querySelector('input[name="HAWBNO"]')?.value || '',
    //                 CUSTOMERID: customerID,
    //                 CUSTOMERNAME: customerName,
    //                 BAYANNO: row.querySelector('input[name="BAYANNO"]')?.value || '',
    //                 TOTALREQUESTAMOUNT: row.querySelector('input[name="TOTALREQUESTAMOUNT"]')?.value || '',
    //                 REMARKS1: row.querySelector('input[name="REMARKS1"]')?.value || '',
    //                 REQUESTEDBY: '@userName',
    //                 CHARGETYPEID1: charge1,
    //                 AMOUNT1: amount1,
    //                 CHARGETYPEID2: charge2,
    //                 AMOUNT2: amount2,
    //                 CREATEDBY: @userId,
    //                 LASTUPDATEDBY: @userId,
    //             };

    //             headers.push(headerdata);

    //         }
    //     });

    //     await $.ajax({
    //         url: '@Url.Action("PostRequestforpayment", "REQUESTHDR")',
    //         method: 'POST',
    //         data: { data: headers }
    //     });
    // }

    $('.maxLengthValidation').on('input paste', function () {
        var maxLength = $(this).attr('maxlength');
        var currentLength = $(this).val().length;
        var remaining = (maxLength - 1) - currentLength;

        if (remaining < 0) {
            // Display validation message or take appropriate action
            event.preventDefault();
        } else {
            // Clear validation message
        }
    });

    document.addEventListener('DOMContentLoaded', () => {
        // Function to update total amount
        function updateTotalAmount(row) {
            const amount1 = parseFloat(row.querySelector('input[name="AMOUNT"]').value) || 0;
            const amount2 = parseFloat(row.querySelectorAll('input[name="AMOUNT"]')[1]?.value) || 0;
            const totalAmount = amount1 + amount2;
            row.querySelector('input[name="TOTALREQUESTAMOUNT"]').value = totalAmount.toFixed(2);
        }

        // Event delegation for input changes
        document.querySelector('#requestHdrGrid tbody').addEventListener('input', (event) => {
            const target = event.target;
            if (target.matches('input[name="AMOUNT"]')) {
                const row = target.closest('tr');
                updateTotalAmount(row);
            }
        });
    });
    // rows.forEach(row => {
    //     let hasValues1 = false;
    //     const customerSelect1validation = row.querySelector('select[name="CUSTOMERID"]');
    //     const customerID1validation = customerSelect1?.value || '';
    //     const requestdatevalidation = row.querySelector('input[name="REQUESTDATE"]')?.value || '';
    //     const jobnovalidation = row.querySelector('input[name="JOBNO"]')?.value || '';
    //     const bayannovalidation = row.querySelector('input[name="BAYANNO"]')?.value || '';
    //     const totalamountvalidation = row.querySelector('input[name="TOTALREQUESTAMOUNT"]')?.value || '';
    //     const charge11validation = row.querySelector('select[name="CHARGETYPEID"]')?.value;
    //     const amount11validation = row.querySelector('input[name="AMOUNT1"]')?.value;

    //     if (
    //         customerID1validation !== '' &&
    //         requestdatevalidation !== '' &&
    //         jobnovalidation !== '' &&
    //         bayannovalidation !== '' &&
    //         totalamountvalidation !== '' &&
    //         charge11validation !== '' &&
    //         amount11validation !== ''
    //     ) {
    //         hasValues1 = true;
    //     }

    //     
    //     if (hasValues1) {
    //         const customerSelect = row.querySelector('select[name="CUSTOMERID"]');
    //         const customerID = customerSelect?.value || '';
    //         const customerName = customerSelect ? customerSelect.options[customerSelect.selectedIndex].text : '';
    //         const charge1 = row.querySelector('select[name="CHARGETYPEID"]')?.value;
    //         const amount1 = row.querySelector('input[name="AMOUNT1"]')?.value;
    //         const remarks1 = row.querySelector('input[name="REMARKS1"]')?.value || '';

    //         const headerdata = {
    //             REQUESTDATE: row.querySelector('input[name="REQUESTDATE"]')?.value || '',
    //             JOBNO: row.querySelector('input[name="JOBNO"]')?.value || '',
    //             CUSTOMERID: customerID,
    //             CUSTOMERNAME: customerName,
    //             BAYANNO: row.querySelector('input[name="BAYANNO"]')?.value || '',
    //             TOTALREQUESTAMOUNT: row.querySelector('input[name="TOTALREQUESTAMOUNT"]')?.value || '',
    //             CHARGETYPEID1: charge1,
    //             AMOUNT1: amount1,
    //             CHARGETYPEID2: charge2,
    //             AMOUNT2: amount2,
    //         };
    //         headers.push(headerdata);
    //     }
    // });

    // async function BindRequest(initialData) {

    //     var table = new DataTable('#requestHdrGrid', {
    //         data: initialData,
    //         columns: [
    //             {
    //                 title: 'Date',
    //                 data: null,
    //                 render: function (data, type, row) {
    //                     return '<input type="date" name="reviewerComment" class="form-control rounded-0" />';
    //                 }
    //             },
    //             {
    //                 title: 'Job No', data: null,
    //                 render: function (data, type, row) {
    //                     return '<input type="text" name="reviewerComment" class="form-control rounded-0 maxLengthValidation" maxlength="@t2TBLength" />';
    //                 }
    //             },
    //             {
    //                 title: 'HAWB', data: null,
    //                 render: function (data, type, row) {
    //                     return '<input type="text" name="reviewerComment" class="form-control rounded-0 maxLengthValidation" maxlength="@t2TBLength" />';
    //                 }
    //             },
    //             {
    //                 title: 'Customer', data: null,
    //                 render: function (data, type, row) {
    //                     var opt = '<select class="status-dropdown chosen-select" style="width: 100px;"onchange="updateSpaceDropdown(this)">';
    //                     var tmp = CustomerData;
    //                     opt += '<option value="">Select</option>';
    //                     tmp.forEach(item => {
    //                         opt += `<option value="${item.id}">${item.name}</option>`;
    //                     });
    //                     opt += '</select>';
    //                     return opt;
    //                 }
    //             },
    //             {
    //                 title: 'Currency', data: null,
    //                 render: function (data, type, row) {
    //                     var opt = '<select class="status-dropdown chosen-select" style="width: 100px;"onchange="updateSpaceDropdown(this)">';
    //                     var tmp = CurrencyData;
    //                     opt += '<option value="">Select</option>';
    //                     tmp.forEach(item => {
    //                         opt += `<option value="${item.id}">${item.name}</option>`;
    //                     });
    //                     opt += '</select>';
    //                     return opt;
    //                 }
    //             },
    //             {
    //                 title: 'Charges 1', data: null,
    //                 render: function (data, type, row) {
    //                     var opt = '<select class="status-dropdown chosen-select" style="width: 100px;"onchange="updateSpaceDropdown(this)">';
    //                     var tmp = CHARGESData;
    //                     opt += '<option value="">Select</option>';
    //                     tmp.forEach(item => {
    //                         opt += `<option value="${item.id}">${item.name}</option>`;
    //                     });
    //                     opt += '</select>';
    //                     return opt;
    //                 }
    //             },
    //             {
    //                 title: 'Amount 1', data: null,
    //                 render: function (data, type, row) {
    //                     return '<input type="text" name="reviewerComment" class="form-control rounded-0 maxLengthValidation" maxlength="@t2TBLength" />';
    //                 }
    //             },
    //             {
    //                 title: 'Charges 2', data: null,
    //                 render: function (data, type, row) {
    //                     var opt = '<select class="status-dropdown chosen-select" style="width: 100px;"onchange="updateSpaceDropdown(this)">';
    //                     var tmp = CHARGESData;
    //                     opt += '<option value="">Select</option>';
    //                     tmp.forEach(item => {
    //                         opt += `<option value="${item.id}">${item.name}</option>`;
    //                     });
    //                     opt += '</select>';
    //                     return opt;
    //                 }
    //             },
    //             {
    //                 title: 'Amount 2', data: null,
    //                 render: function (data, type, row) {
    //                     return '<input type="text" name="reviewerComment" class="form-control rounded-0 maxLengthValidation" maxlength="@t2TBLength" />';
    //                 }
    //             },
    //             {
    //                 title: 'Total Amount', data: null,
    //                 render: function (data, type, row) {
    //                     return '<input type="text" name="reviewerComment" class="form-control rounded-0 maxLengthValidation" maxlength="@t2TBLength" />';
    //                 }
    //             },
    //             {
    //                 title: 'Bayan No',
    //                 orderable: false,
    //                 data: null,
    //                 render: function (data, type, row) {
    //                     return '<input type="text" name="reviewerComment" class="form-control rounded-0 maxLengthValidation" maxlength="@t2TBLength" />';
    //                 }
    //             },
    //             {
    //                 title: 'Upload Bayan Copy',
    //                 orderable: false,
    //                 data: null,
    //                 render: function (data, type, row) {
    //                     return '<input type="file" name="file' + row.id + '" data-id="' + row.id + '">';
    //                 }
    //             },
    //         ],
    //         lengthChange: true,
    //         autoWidth: false,
    //         paging: true,
    //         scrollY: 300,
    //         pagingType: 'full_numbers',
    //         search: true,
    //         destroy: true
    //     })
    // }
    // function addRow() {
    //     var newRow = {};
    //     var table = $('#requestHdrGrid').DataTable();
    //     table.row.add(newRow).draw();
    //     $('.chosen-select').chosen();
    // }
</script>