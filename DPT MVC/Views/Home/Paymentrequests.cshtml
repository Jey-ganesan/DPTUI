@using System.Text.Json
@using DPT.MVC.Helper
@inject IConfiguration Configuration

@{
    int decimalRoundOff = Configuration.GetValue<int>("NumberSettings:DecimalRoundOff");
    int t1TBLength = Configuration.GetValue<int>("CharacterSettings:T1TypeTextbox");
    int t2TBLength = Configuration.GetValue<int>("CharacterSettings:T2TypeTextbox");
    int t3TBLength = Configuration.GetValue<int>("CharacterSettings:T3TypeTextbox");
    int t4TBLength = Configuration.GetValue<int>("CharacterSettings:T4TypeTextbox");
    int t5TBLength = Configuration.GetValue<int>("CharacterSettings:T5TypeTextbox");
    string? dateFormat = Configuration.GetValue<string>("Date:dateFormat");
    string? dateFormatForbinding = Configuration.GetValue<string>("Date:dateFormatForbinding");
    string mode = ViewBag.mode;
    string url = ViewBag.url;
    int pageId = ViewBag.pageId;
    int userId = Convert.ToInt32(SessionHelper.GetStringValueFromSession(Context, "UserId"));
    string userName = SessionHelper.GetStringValueFromSession(Context, "DisplayName");
}

<head>
    <style>
        /* Center table headings */
        th {
            text-align: center !important;
        }

        .chosen-results {
            background-color: white;
            width: 300px;
        }

        #requestHdrGrid td {
            padding: 0 !important;
            vertical-align: middle;
            horizontal-align: middle;
            text-align: center;
        }

        #requestHdrGrid th {
            white-space: nowrap;
        }

        .chosen-search {
            background-color: white;
            width: 300px;
        }

        .chosen-results {
            text-align: left;
        }

        /* #requestHdrGrid tbody tr:nth-child(odd) {
                                                    background-color: #d0d0d0;
                                                }

                                                #requestHdrGrid tbody tr:nth-child(even) {
                                                    background-color: #f2f2f2;
                                                } */

    </style>
</head>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12 mx-auto col-lg-12">
            <div class="card shadow-lg">
                <div class="card-header text-white bg-warning d-flex">
                    <div class="col-lg-4 col-md-6 col-sm-12">
                        <h4 class="text-lg-start">
                            @if (mode == "View")
                            {
                                @:VIEW PAYMENT DETAILS
                            }
                            else
                            {
                                @:PAYMENT REQUEST
                            }
                        </h4>
                    </div>
                    <div class="col-lg-4 col-md-6 col-sm-12">
                        <span class="text-danger"> * Required fields</span>
                    </div>
                    @*                     <div class='col-md-4 col-sm-6 col-lg-1'>
                    <a href='#' id="viewrequest" class='btn btn-outline-primary btn-sm float-sm-center'>
                    View Requests
                    </a>
                    </div> *@
                </div>
                <div class="card-body">
                    <form id="Requestform">
                        <fieldset>
                            <div class="row">
                            </div>
                            <br />
                            <div class="table-container">
                                <table id="requestHdrGrid" class="table">
                                    <thead>
                                        <tr>
                                            <th>DATE<span class="text-danger">*</span></th>
                                            <th>JOB NO<span class="text-danger">*</span></th>
                                            <th>HAWB<span class="text-danger">*</span></th>
                                            <th>CUSTOMER<span class="text-danger">*</span></th>
                                            <th>CHARGE 1<span class="text-danger">*</span></th>
                                            <th>AMOUNT 1<span class="text-danger">*</span></th>
                                            <th>CHARGE 2</th>
                                            <th>AMOUNT 2</th>
                                            <th>TOTAL AMOUNT<span class="text-danger">*</span></th>
                                            <th>REMARKS</th>
                                            <th>BAYAN NO<span class="text-danger">*</span></th>
                                            <th>UPLOAD BAYAN COPY</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                    </tbody>
                                </table>
                            </div>
                        </fieldset>
                    </form>
                    <form id="Formview" style="display:none">
                        <fieldset>
                            <div class="row">
                                <div class="col-sm-1">
                                    <label class="form-label" for="requestno">REQUEST NO</label>
                                </div>
                                <div class="col-sm-3">
                                    <input class="form-control rounded-0" name="requestno" id="requestno" type="text" disabled />
                                </div>
                                <div class="col-sm-1">
                                    <label class="form-label" for="requestdate">REQUEST DATE</label>
                                </div>
                                <div class="col-sm-3">
                                    <input class="form-control rounded-0" name="date" id="requestdate" type="date" disabled />
                                </div>
                                <div class="col-sm-1">
                                    <label class="form-label" for="jobNo">JOB NO</label>
                                </div>
                                <div class="col-sm-3">
                                    <input class="form-control rounded-0" name="jobNo" id="jobNo" type="text" disabled />
                                </div>
                            </div>
                            <br />
                            <div class="row">
                                <div class="col-sm-1">
                                    <label class="form-label" for="hawb">HAWB</label>
                                </div>
                                <div class="col-sm-3">
                                    <input class="form-control rounded-0" name="hawb" id="hawb" type="text" disabled />
                                </div>
                                <div class="col-sm-1">
                                    <label class="form-label" for="customer">CUSTOMER</label>
                                </div>
                                <div class="col-sm-3">
                                    <input class="form-control rounded-0" name="customer" id="customer" type="text" disabled />
                                </div>
                                <div class="col-sm-1">
                                    <label class="form-label" for="charge1">CHARGE 1</label>
                                </div>
                                <div class="col-sm-3">
                                    <input class="form-control rounded-0" name="charge1" id="charge1" type="text" disabled />
                                </div>
                            </div>
                            <br />
                            <div class="row">
                                <div class="col-sm-1">
                                    <label class="form-label" for="amount1">AMOUNT 1</label>
                                </div>
                                <div class="col-sm-3">
                                    <input class="form-control rounded-0" name="amount1" id="amount1" type="number" disabled />
                                </div>
                                <div class="col-sm-1">
                                    <label class="form-label" for="charge2">CHARGE 2</label>
                                </div>
                                <div class="col-sm-3">
                                    <input class="form-control rounded-0" name="charge2" id="charge2" type="text" disabled />
                                </div>
                                <div class="col-sm-1">
                                    <label class="form-label" for="amount2">AMOUNT 2</label>
                                </div>
                                <div class="col-sm-3">
                                    <input class="form-control rounded-0" name="amount2" id="amount2" type="number" disabled />
                                </div>
                            </div>
                            <br />
                            <div class="row">
                                <div class="col-sm-1">
                                    <label class="form-label" for="totalAmount">TOTAL AMOUNT</label>
                                </div>
                                <div class="col-sm-3">
                                    <input class="form-control rounded-0" name="totalAmount" id="totalAmount" type="number" disabled />
                                </div>
                                <div class="col-sm-1">
                                    <label class="form-label" for="bayanNo">BAYAN NO</label>
                                </div>
                                <div class="col-sm-3">
                                    <input class="form-control rounded-0" name="bayanNo" id="bayanNo" type="text" disabled />
                                </div>
                                <div class="col-sm-1">
                                    <label class="form-label" for="bayanCopy">UPLOAD BAYAN COPY</label>
                                </div>
                                <div class="col-sm-3">
                                    <input class="form-control rounded-0" name="bayanCopy" id="bayanCopy" type="text" disabled />
                                </div>
                            </div>
                            <br />
                        </fieldset>
                    </form>
                    <div class="row">
                        <div class="col-sm-12">
                            @if (mode != "View")
                            {
                                @:<button id="addRowBtn" class="btn btn-primary rounded-0 me-2">Add More Rows</button>
                                @:<button onclick="SubmitrequestedRecord()" class="btn btn-primary rounded-0 me-2">Submit</button>
                            }
                            <a class="btn btn-warning rounded-0 me-2" href="#" onclick="loadPageWithParams('GridMastersParam','','',@ViewBag.pageId)">Cancel</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">

    $(document).ready(async function () {
        if ('@mode' == 'View') {
            $('#Requestform').hide();
            await BindDatatoForm(@ViewBag.paramID);
        } else {
            await Customerdata();
            // await Currencydata();
            await Chargesdata();
            for (let i = 0; i < 5; i++) {
                await addRow();
            }
        }
    });

    var CHARGESData;
    var CurrencyData;
    var CustomerData;
    // var initialData = Array(5).fill({});

    async function Chargesdata() {
        CHARGESData = await $.ajax({
            url: '@Url.Action("GetCharges", "MasterCHARGES")',
            type: 'get',
        });
    }

    async function Currencydata() {
        CurrencyData = await $.ajax({
            url: '@Url.Action("GetCurrencies", "MasterCurrencies")',
            type: 'get',
        });
    }

    async function Customerdata() {
        CustomerData = await $.ajax({
            url: '@Url.Action("GetCustomersForRequest", "Customers")',
            type: 'get',
        });
    }

    async function BindDatatoForm(Hdrid) {
        try {
            let RequestRecord = await $.ajax({
                url: '@Url.Action("GetRequestToviewByid", "REQUESTHDR")',
                type: 'Get',
                data: { Hdrid: Hdrid }
            });
            
            await GetAttachmentFile('PaymentRequest', Hdrid)

            $('#Formview').show();

            var dateString = RequestRecord.requestdate
            var Formateddate = dateString.split('T')[0]
            Flatpicker(Formateddate);

            $('#requestno').val(RequestRecord.requestno);
            $('#jobNo').val(RequestRecord.jobno);
            $('#hawb').val(RequestRecord.hawbno);
            $('#customer').val(RequestRecord.customername);
            $('#charge1').val(RequestRecord.chargE1);
            $('#amount1').val(RequestRecord.amounT1);
            $('#charge2').val(RequestRecord.chargE2);
            $('#amount2').val(RequestRecord.amounT2);
            $('#totalAmount').val(RequestRecord.totalrequestamount);
            $('#bayanNo').val(RequestRecord.bayanno);

        } catch (error) {
            console.log(error);
        }
    }

    async function GetAttachmentFile(TransName, TransId) {

        await fetch(`/Files/GetFilesPath?transName=${TransName}&Id=${TransId}`)
            .then(response => response.json())
            .then(data4 => {
                if (data4.length > 0) {
                    $("#bayanCopy").val(data4[0].fileName);

                    var downloadLink = $('<a>', {
                        text: data4[0].fileName,
                        href: '#',
                        click: async function () {
                            await DownLoadFileProcessed(data4[0].id, data4[0].fileName);
                        }
                    });
                    $('#bayanCopy').replaceWith(downloadLink);
                }
            })
            .catch((error) => {
                console.error('Error:', error);
            });
    }

    async function DownLoadFileProcessed(id, fileName) {
        event.preventDefault();
        debugger;
        var xhr = new XMLHttpRequest();
        xhr.open('GET', `/Files/DownloadFile?id=${id}`, true);
        xhr.responseType = 'blob';


        xhr.onload = function () {
            if (xhr.status === 200) {
                var blob = xhr.response;
                var downloadLink = document.createElement('a');
                downloadLink.href = window.URL.createObjectURL(blob);
                downloadLink.setAttribute('download', fileName);
                document.body.appendChild(downloadLink);
                downloadLink.click();
                document.body.removeChild(downloadLink);
            } else {
                alert('File Not Found.');
            }
        };


        xhr.onerror = function () {
            console.error('Network error occurred while downloading the file.');
        };


        xhr.send();


    }

    function addRow() {
        const table = document.querySelector('#requestHdrGrid tbody');
        const newRow = document.createElement('tr');

        newRow.innerHTML = `
            <td><input type="date" name="REQUESTDATE" class="chosen-border form-control rounded-0 date-picker"></td>
            <td><input type="text" name="JOBNO" class="chosen-border toUpperCaseString form-control rounded-0 maxLengthValidation" maxlength="@t1TBLength"></td>
            <td><input type="text" name="HAWBNO" class="chosen-border form-control toUpperCaseString rounded-0 maxLengthValidation" maxlength="@t1TBLength"></td>
            <td>
                <select name="CUSTOMERID" class="status-dropdown chosen-select" style="width: 100px;">
                    <option value="">Select</option>
                    ${CustomerData.map(item => `<option value="${item.id}">${item.name}</option>`).join('')}
                </select>
            </td>
            <td>
                <select name="CHARGETYPEID1" class="status-dropdown chosen-select" style="width: 100px;">
                    <option value="">Select</option>
                    ${CHARGESData.map(item => `<option value="${item.id}">${item.type}</option>`).join('')}
                </select>
            </td>
            <td><input name="AMOUNT1" type="text" name="reviewerComment" oninput="updateTotalAmount1(this);" class="chosen-border form-control rounded-0 maxLengthValidation" maxlength="@t5TBLength"></td>
            <td>
                <select name="CHARGETYPEID2" class="status-dropdown chosen-select" style="width: 100px;">
                    <option value="">Select</option>
                    ${CHARGESData.map(item => `<option value="${item.id}">${item.type}</option>`).join('')}
                </select>
            </td>
            <td><input type="text" name="AMOUNT2" oninput="updateTotalAmount2(this);" class="chosen-border form-control rounded-0 maxLengthValidation" maxlength="@t5TBLength"></td>
            <td><input type="text" name="TOTALREQUESTAMOUNT" class="chosen-border form-control rounded-0 maxLengthValidation" maxlength="@t5TBLength"disabled></td>
            <td><input type="text" name="REMARKS1" class="chosen-border form-control toUpperCaseString rounded-0 maxLengthValidation" maxlength="@t4TBLength"></td>
            <td><input type="text" name="BAYANNO" class="chosen-border toUpperCaseString form-control rounded-0 maxLengthValidation" maxlength="@t1TBLength"></td>
            <td><input type="file" name="file" class="chosen-border form-control"></td>
        `;

        table.appendChild(newRow);
        $('.chosen-select').chosen();
        $('.chosen-drop').css('width', '310px');
        $('.date-picker').flatpickr({
            dateFormat: "@dateFormat",
            defaultDate: new Date()
        });
        newRow.querySelectorAll('.amount-field').forEach(field => {
            field.addEventListener('input', updateTotalAmount);
        });
        $('.toUpperCaseString').on('input paste', function () {
            $(this).val($(this).val().toLocaleUpperCase());
        });

        $('.toUpperCaseString').on('input', function () {
            $(this).val($(this).val().toLocaleUpperCase());
        });
    }

    function updateTotalAmount1(inputField) {

        const row = inputField.closest('tr');
        const amount1Input = row.querySelector('input[name="AMOUNT1"]');
        const totalAmountInput = row.querySelector('input[name="TOTALREQUESTAMOUNT"]');

        if (amount1Input && totalAmountInput) {
            const amount1 = parseFloat(amount1Input.value) || 0;
            const totalAmount = amount1;
            totalAmountInput.value = totalAmount.toFixed(2);
        } else {
            console.error("One or more input fields not found.");
        }
        inputField.value = inputField.value.replace(/[^0-9.]/g, ''); // Allow digits and decimal points
        if ((inputField.value.match(/\./g) || []).length > 1) {
            inputField.value = inputField.value.slice(0, -1); // Remove the extra decimal point if more than one exists
        }
    }

    function updateTotalAmount2(inputField) {

        const row = inputField.closest('tr');
        const amount1Input = row.querySelector('input[name="AMOUNT1"]');
        const amount2Input = row.querySelector('input[name="AMOUNT2"]');
        const totalAmountInput = row.querySelector('input[name="TOTALREQUESTAMOUNT"]');

        if (amount1Input && amount2Input && totalAmountInput) {
            const amount1 = parseFloat(amount1Input.value) || 0;
            const amount2 = parseFloat(amount2Input.value) || 0;
            const totalAmount = amount1 + amount2;
            totalAmountInput.value = totalAmount.toFixed(2);
        } else {
            console.error("One or more input fields not found.");
        }
        inputField.value = inputField.value.replace(/[^0-9.]/g, ''); // Allow digits and decimal points
        if ((inputField.value.match(/\./g) || []).length > 1) {
            inputField.value = inputField.value.slice(0, -1); // Remove the extra decimal point if more than one exists
        }
    }

    $('#addRowBtn').on('click', addRow);

    $('#viewrequest').on('click', viewRequest);

    function viewRequest() {
        loadPageWithParams('ViewPaymentrequests')
    }


    function validateForm() {
        let isValid = true;
        const rows = document.querySelectorAll('#requestHdrGrid tbody tr');

        for (let i = 0; i < rows.length; i++) {
            const row = rows[i];
            const customerID = row.querySelector('select[name="CUSTOMERID"]').value;
            const jobNo = row.querySelector('input[name="JOBNO"]').value;
            const bayanNo = row.querySelector('input[name="BAYANNO"]').value;
            const totalAmount = row.querySelector('input[name="TOTALREQUESTAMOUNT"]').value;
            const chargeType1 = row.querySelector('select[name="CHARGETYPEID1"]').value;
            const amount1 = row.querySelector('input[name="AMOUNT1"]').value;

            const charge2 = row.querySelector('select[name="CHARGETYPEID2"]')?.value;
            const amount2 = row.querySelector('input[name="AMOUNT2"]')?.value;

            if (customerID == '' && jobNo == '' && bayanNo == '' && totalAmount == '' && chargeType1 == '' && amount1 == '') {
                row.remove();
            } else {
                if (customerID == '' || jobNo == '' || bayanNo == '' || totalAmount == '' || chargeType1 == '' || amount1 == '') {
                    isValid = false;
                    return isValid;
                } else if (charge2 !== '' && amount2 == '') {
                    isValid = false;
                    return isValid;

                }
            }
        }
        return isValid;
    }


    async function SubmitrequestedRecord() {
        if (!validateForm()) {
            alert('Please fill all the required fields.')
            return;
        }

        // Get all rows in the header table
        const rows = document.querySelectorAll('#requestHdrGrid tbody tr');

        const headers = [];
        const details = [];

        const Validationdata = [];



        rows.forEach(async (row) => {
            const inputs = row.querySelectorAll('input, select');
            let hasValues = false;
            const customerSelect1 = row.querySelector('select[name="CUSTOMERID"]');
            const customerID1 = customerSelect1?.value || '';
            const requestdate = row.querySelector('input[name="REQUESTDATE"]')?.value || '';
            const jobno = row.querySelector('input[name="JOBNO"]')?.value || '';
            const bayanno = row.querySelector('input[name="BAYANNO"]')?.value || '';
            const totalamount = row.querySelector('input[name="TOTALREQUESTAMOUNT"]')?.value || '';
            const charge11 = row.querySelector('select[name="CHARGETYPEID1"]')?.value;
            const amount11 = row.querySelector('input[name="AMOUNT1"]')?.value;

            if (customerID1 !== '' && requestdate !== '' && jobno !== '' && bayanno !== '' && totalamount !== '' && charge11 !== '' && amount11 !== '') {
                hasValues = true;
            } else {
                row.remove();
            }

            if (hasValues) {

                // Gather header data for each row
                const customerSelect = row.querySelector('select[name="CUSTOMERID"]');
                const customerID = customerSelect?.value || '';
                const customerName = customerSelect ? customerSelect.options[customerSelect.selectedIndex].text : '';

                const headerdata = {
                    REQUESTDATE: row.querySelector('input[name="REQUESTDATE"]')?.value || '',
                    JOBNO: row.querySelector('input[name="JOBNO"]')?.value || '',
                    HAWBNO: row.querySelector('input[name="HAWBNO"]')?.value || '',
                    CUSTOMERID: customerID,
                    CUSTOMERNAME: customerName,
                    BAYANNO: row.querySelector('input[name="BAYANNO"]')?.value || '',
                    TOTALREQUESTAMOUNT: row.querySelector('input[name="TOTALREQUESTAMOUNT"]')?.value || '',
                    REMARKS1: row.querySelector('input[name="REMARKS1"]')?.value || '',
                    REQUESTEDBY: '@userName' // Replace with your actual value or logic to get this value
                };

                headers.push(headerdata);

                const res1 = await $.ajax({
                    url: '@Url.Action("SaveREQUESTHDR", "REQUESTHDR")',
                    method: 'POST',
                    data: headerdata
                });

                const HDRID = res1.hdrid;

                await uploadFile(HDRID, row);

                // Gather detail data for each row
                const charge1 = row.querySelector('select[name="CHARGETYPEID1"]')?.value;
                const amount1 = row.querySelector('input[name="AMOUNT1"]')?.value;

                if (charge1 && amount1) {

                    var detail1Obj = {
                        HDRID: HDRID, // Will be set after header is saved
                        CHARGETYPEID: charge1,
                        AMOUNT: amount1,
                    };
                    await $.ajax({
                        url: '@Url.Action("SaveREQUESTDTL", "REQUESTDTL")',
                        method: 'POST',
                        data: detail1Obj
                    });
                }

                const charge2 = row.querySelector('select[name="CHARGETYPEID2"]')?.value;
                const amount2 = row.querySelector('input[name="AMOUNT2"]')?.value;

                if (charge2 && amount2) {

                    var detail2Obj = {
                        HDRID: HDRID, // Will be set after header is saved
                        CHARGETYPEID: charge2,
                        AMOUNT: amount2,
                    };
                    await $.ajax({
                        url: '@Url.Action("SaveREQUESTDTL", "REQUESTDTL")',
                        method: 'POST',
                        data: detail2Obj
                    });
                }
            }
        });
        await loadForm();
    }

    async function loadForm() {
        alert('Record created successfully')
        loadPageWithParams('GridMastersParam', '', '', '15')
    }

    async function uploadFile(headerId, row) {

        var fileInput = row.querySelector('input[type="file"]');
        var files = fileInput.files;

        if (files.length === 0) {
            return;
        }

        for (let i = 0; i < files.length; i++) {
            debugger;
            var formData = new FormData();
            formData.append('file', files[i]);
            formData.append('typeId', '1');
            formData.append('transName', 'PaymentRequest');

            try {
                await $.ajax({
                    url: "@Url.Action("SaveFile", "Files")",
                    type: "POST",
                    headers: { 'ProdId': headerId },
                    data: formData,
                    contentType: false,
                    processData: false
                });
            } catch (error) {
                console.error("Error uploading file:", error);
            }
        }
    }

    // async function SubmitrequestedRecord() {
    //
    //     if (!validateForm()) {
    //         alert('Please fill all the required fields.')
    //         return;
    //     }

    //     // Get all rows in the header table
    //     const rows = document.querySelectorAll('#requestHdrGrid tbody tr');

    //     const headers = [];

    //     rows.forEach(row => {
    //         const inputs = row.querySelectorAll('input, select');
    //         let hasValues = false;
    //         const customerSelect1 = row.querySelector('select[name="CUSTOMERID"]');
    //         const customerID1 = customerSelect1?.value || '';
    //         const requestdate = row.querySelector('input[name="REQUESTDATE"]')?.value || '';
    //         const jobno = row.querySelector('input[name="JOBNO"]')?.value || '';
    //         const bayanno = row.querySelector('input[name="BAYANNO"]')?.value || '';
    //         const totalamount = row.querySelector('input[name="TOTALREQUESTAMOUNT"]')?.value || '';
    //         const charge11 = row.querySelector('select[name="CHARGETYPEID1"]')?.value;
    //         const amount11 = row.querySelector('input[name="AMOUNT1"]')?.value;

    //         if (customerID1 !== '' && requestdate !== '' && jobno !== '' && bayanno !== '' && totalamount !== '' && charge11 !== '' && amount11 !== '') {
    //             hasValues = true;
    //         } else {
    //             row.remove();
    //         }
    //
    //         if (hasValues) {
    //             // Gather header data for each row
    //             const customerSelect = row.querySelector('select[name="CUSTOMERID"]');
    //             const customerID = customerSelect?.value || '';
    //             const customerName = customerSelect ? customerSelect.options[customerSelect.selectedIndex].text : '';
    //             const charge1 = row.querySelector('select[name="CHARGETYPEID1"]')?.value;
    //             const amount1 = row.querySelector('input[name="AMOUNT1"]')?.value;
    //             const charge2 = row.querySelector('select[name="CHARGETYPEID2"]')?.value;
    //             const amount2 = row.querySelector('input[name="AMOUNT2"]')?.value;

    //             const headerdata = {
    //                 REQUESTDATE: row.querySelector('input[name="REQUESTDATE"]')?.value || '',
    //                 JOBNO: row.querySelector('input[name="JOBNO"]')?.value || '',
    //                 HAWBNO: row.querySelector('input[name="HAWBNO"]')?.value || '',
    //                 CUSTOMERID: customerID,
    //                 CUSTOMERNAME: customerName,
    //                 BAYANNO: row.querySelector('input[name="BAYANNO"]')?.value || '',
    //                 TOTALREQUESTAMOUNT: row.querySelector('input[name="TOTALREQUESTAMOUNT"]')?.value || '',
    //                 REMARKS1: row.querySelector('input[name="REMARKS1"]')?.value || '',
    //                 REQUESTEDBY: '@userName',
    //                 CHARGETYPEID1: charge1,
    //                 AMOUNT1: amount1,
    //                 CHARGETYPEID2: charge2,
    //                 AMOUNT2: amount2,
    //                 CREATEDBY: @userId,
    //                 LASTUPDATEDBY: @userId,
    //             };

    //             headers.push(headerdata);

    //         }
    //     });

    //     await $.ajax({
    //         url: '@Url.Action("PostRequestforpayment", "REQUESTHDR")',
    //         method: 'POST',
    //         data: { data: headers }
    //     });
    // }

    $('.maxLengthValidation').on('input paste', function () {
        var maxLength = $(this).attr('maxlength');
        var currentLength = $(this).val().length;
        var remaining = (maxLength - 1) - currentLength;

        if (remaining < 0) {
            // Display validation message or take appropriate action
            event.preventDefault();
        } else {
            // Clear validation message
        }
    });

    document.addEventListener('DOMContentLoaded', () => {
        // Function to update total amount
        function updateTotalAmount(row) {
            const amount1 = parseFloat(row.querySelector('input[name="AMOUNT"]').value) || 0;
            const amount2 = parseFloat(row.querySelectorAll('input[name="AMOUNT"]')[1]?.value) || 0;
            const totalAmount = amount1 + amount2;
            row.querySelector('input[name="TOTALREQUESTAMOUNT"]').value = totalAmount.toFixed(2);
        }

        // Event delegation for input changes
        document.querySelector('#requestHdrGrid tbody').addEventListener('input', (event) => {
            const target = event.target;
            if (target.matches('input[name="AMOUNT"]')) {
                const row = target.closest('tr');
                updateTotalAmount(row);
            }
        });
    });

    function Flatpicker(defaultDateValue) {
        flatpickr("#requestdate", {
            dateFormat: "@dateFormatForbinding", // Set the desired format for input (YYYY-MM-DD)
            altInput: true,
            altFormat: "@dateFormat", // Set the format for the alternative input display (14-Jun-2024)
            maxDate: new Date(),
            defaultDate: defaultDateValue // Ensure defaultDate is set to 'YYYY-MM-DD' format
        });
    }

</script>