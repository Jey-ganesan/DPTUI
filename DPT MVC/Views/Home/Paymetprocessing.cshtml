    @using System.Text.Json
    @using DPT.MVC.Helper
    @inject IConfiguration Configuration

@{
    int decimalRoundOff = Configuration.GetValue<int>("NumberSettings:DecimalRoundOff");
    int t1TBLength = Configuration.GetValue<int>("CharacterSettings:T1TypeTextbox");
    int t2TBLength = Configuration.GetValue<int>("CharacterSettings:T2TypeTextbox");
    int t3TBLength = Configuration.GetValue<int>("CharacterSettings:T3TypeTextbox");
    int t4TBLength = Configuration.GetValue<int>("CharacterSettings:T4TypeTextbox");
    int t5TBLength = Configuration.GetValue<int>("CharacterSettings:T5TypeTextbox");
    string? dateFormat = Configuration.GetValue<string>("Date:dateFormat");
    string? dateFormatForbinding = Configuration.GetValue<string>("Date:dateFormatForbinding");
    string mode = ViewBag.mode;
    string url = ViewBag.url;
    int pageId = ViewBag.pageId;
    int userId = Convert.ToInt32(SessionHelper.GetStringValueFromSession(Context, "UserId"));
    string userName = SessionHelper.GetStringValueFromSession(Context, "DisplayName");

}

<head>
    <style>
        .table-container {
            height: 320px; /* Adjust the height as needed */
            overflow-y: auto;
            position: relative;
        }

            .table-container table {
                width: 100%;
                border-collapse: collapse;
            }

            .table-container thead th {
                position: sticky;
                top: 0;
                background: white;
                z-index: 1;
                border: 1px solid #ccc; /* Ensure the border matches */
                padding: 8px;
            }

            .table-container th, .table-container td {
                border: 1px solid #ccc;
                padding: 8px;
            }

        .chosen-container {
            width: 100% !important;
        }

        .alignright {
            text-align: right;
        }

        /* .overlay {
                            position: absolute;
                            top: 0;
                            left: 0;
                            width: 100%;
                            height: 100%;
                            background: rgba(255, 255, 255, 0.8);
                            z-index: 10;
                            display: none;
                        }
                        .table-container {
                            position: relative;
                        } */

    </style>
</head>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12 mx-auto col-lg-12">
            <div class="card shadow-lg">
                <div class="card-header text-white bg-warning d-flex">
                    <div class="col-lg-4 col-md-6 col-sm-12">
                        <h4 class="text-lg-start">
                            PAYMENT PROCESSING
                        </h4>
                    </div>
                    <div class="col-lg-4 col-md-6 col-sm-12">
                        <span class="text-danger"> * Required fields</span>
                    </div>
                </div>
                <div class="card-body">
                    <form id="CPOForm">
                        <div class="readonlyPortation">
                            <div class="row">
                                <div class="col-sm-1 alignright">
                                    <label class="form-labell" for="tranNo">TRAN NO<span class="text-danger">*</span></label>
                                </div>
                                <div class="col-sm-2">
                                    <input type="text" class="form-control rounded-0 maxLengthValidation toUpperCaseString" maxlength="@t2TBLength" name="TRANNO" id="tranNo" />
                                </div>
                                <div class="col-sm-1 alignright">
                                    <label class="form-label" for="tranDate">DATE<span class="text-danger">*</span></label>
                                </div>
                                <div class="col-sm-2">
                                    <input type="date" class="form-control rounded-0" name="TRANDATE" id="tranDate" />
                                </div>
                                <div class="col-sm-1 alignright">
                                    <label class="form-label" for="remarks1">REMARKS1</label>
                                </div>
                                <div class="col-sm-2">
                                    <input type="text" class="form-control rounded-0 maxLengthValidation toUpperCaseString" maxlength="@t4TBLength" name="remarks1" id="remarks1" />
                                </div>
                                <div class="col-sm-1 alignright">
                                    <label class="form-label" for="remarks2">REMARKS2</label>
                                </div>
                                <div class="col-sm-2">
                                    <input type="text" class="form-control rounded-0 maxLengthValidation toUpperCaseString" maxlength="@t4TBLength" name="remarks2" id="remarks2" />
                                </div>
                                @* <div class="col-sm-2">
                                <div class="col-sm-1">
                                <label class="form-label" for="poType">MODE<span class="text-danger">*</span></label>
                                </div>
                                <Select class="form-control rounded-0 chosn" id="poType">
                                <option value="" >-- Select Option --</option>
                                <option value="demo">MODE1</option>
                                <option value="demo1">MODE2</option>
                                </Select>
                                </div>
                                <div class="col-sm-1">
                                <label class="form-label" for="AMOUNT">AMOUNT<span class="text-danger">*</span></label>
                                </div>
                                <div class="col-sm-2">
                                <input type="text" class="form-control rounded-0 maxLengthValidation" name="AMOUNT" id="AMOUNT" />
                                </div> *@
                            </div>
                            <br />
                            @* <div class="row">
                            <div class="col-sm-1">
                            <label class="form-label" for="remarks1">REMARKS1</label>
                            </div>
                            <div class="col-sm-5">
                            <input type="text" class="form-control rounded-0 maxLengthValidation toUpperCaseString" maxlength="@t3TBLength" name="remarks1" id="remarks1" />
                            </div>
                            <div class="col-sm-1">
                            <label class="form-label" for="remarks2">REMARKS2</label>
                            </div>
                            <div class="col-sm-5">
                            <input type="text" class="form-control rounded-0 maxLengthValidation toUpperCaseString" maxlength="@t3TBLength" name="remarks2" id="remarks2" />
                            </div>
                            </div>
                            <br /> *@
                            <div class="row">
                                <div class="col-sm-1 alignright">
                                    <label class="form-label" for="requestNo">REQUEST NO<span class="text-danger">*</span></label>
                                </div>
                                <div class="col-sm-2">
                                    <Select class="form-control rounded-0 chosn" id="requestNo">
                                        <option value="">Select Option</option>
                                    </Select>
                                </div>
                                <div class="col-sm-1 alignright">
                                    <label class="form-label" for="requestDate">REQUSTED DATE<span class="text-danger">*</span></label>
                                </div>
                                <div class="col-sm-2">
                                    <input type="date" class="form-control rounded-0" name="REQUESTDATE" id="requestDate" disabled />
                                </div>
                                <div class="col-sm-1 alignright">
                                    <label class="form-label" for="jobNo">JOB NO<span class="text-danger">*</span></label>
                                </div>
                                <div class="col-sm-2">
                                    <input type="text" class="form-control rounded-0 maxLengthValidation" name="JOBNO" id="jobNo" readonly />
                                </div>
                                <div class="col-sm-1 alignright">
                                    <label class="form-label" for="totalRequestamount">AMOUNT<span class="text-danger">*</span></label>
                                </div>
                                <div class="col-sm-2">
                                    <input type="text" class="form-control rounded-0" name="TOTALREQUESTAMOUNT" id="totalRequestamount" readonly />
                                </div>
                            </div>
                            <br />
                            @* <div style="border: 2px solid black;padding: 10px">
                            <div class="row">
                            <div class="col-sm-1">
                            <label class="form-label" for="charge1">CHARGE 1</label>
                            </div>
                            <div class="col-sm-1">
                            <input type="text" class="form-control rounded-0" name="CHARGE1" id="charge1" readonly />
                            </div>
                            <div class="col-sm-1">
                            <label class="form-label" for="description">AMOUNT 1</label>
                            </div>
                            <div class="col-sm-1">
                            <input type="text" class="form-control rounded-0" name="AMOUNT1" id="amount1" readonly />
                            </div>
                            <div class="col-sm-1">
                            <label class="form-label" for="charge2">CHARGE 2</label>
                            </div>
                            <div class="col-sm-1">
                            <input type="text" class="form-control rounded-0" name="CHARGE2" id="charge2" readonly />
                            </div>
                            <div class="col-sm-1">
                            <label class="form-label" for="description">AMOUNT 2</label>
                            </div>
                            <div class="col-sm-1">
                            <input type="text" class="form-control rounded-0" name="AMOUNT2" id="amount2" readonly />
                            </div>
                            <div class="col-sm-1" style="white-space:nowrap">
                            <input type="checkbox" id="Adddetailsofcharges" value="true">
                            <label class="form-label" style="white-space:nowrap" for="dofr">Do you like to continue with the current charges?</label>
                            </div>
                            </div>
                            <br />

                            </div>
                            <br /> *@
                            <label class="form-label">RECEIPT 1</label>
                            <div style="border: 2px solid black;padding: 10px">
                                <div class="row">
                                    <div class="col-sm-1 alignright">
                                        <label class="form-label toUpperCaseString" for="receiptNo1">RECEIPT NO 1<span class="text-danger">*</span></label>
                                    </div>
                                    <div class="col-sm-2">
                                        <input type="text" class="form-control rounded-0" name="RECEIPTNO" id="receiptNo1" />
                                    </div>
                                    <div class="col-sm-1 alignright">
                                        <label class="form-label" for="receiptDate1">DATE<span class="text-danger">*</span></label>
                                    </div>
                                    <div class="col-sm-1">
                                        <input type="date" class="form-control rounded-0" name="RECEIPTDATE" id="receiptDate1" />
                                    </div>
                                    <div class="col-sm-1 alignright">
                                        <label class="form-label" for="amount1">AMOUNT<span class="text-danger">*</span></label>
                                    </div>
                                    <div class="col-sm-1">
                                        <input type="text" oninput="validateNumericInput(this);" maxlength="@t5TBLength" class="form-control rounded-0" name="AMOUNT" id="amount1" />
                                    </div>
                                    <div class="col-sm-1 alignright">
                                        <label class="form-label" for="remarks1rec1">REMARKS</label>
                                    </div>
                                    <div class="col-sm-2">
                                        <input type="text" class="form-control rounded-0 toUpperCaseString" maxlength="@t4TBLength" name="REMARKS1" id="remarks1rec1" />
                                    </div>
                                    <div class="col-sm-1 alignright">
                                        <label class="form-label">ATTACHMENTS</label>
                                    </div>
                                    <div class="col-sm-1">
                                        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalCenter1">
                                            <i class="fa fa-paperclip" aria-hidden="true"></i>
                                        </button>
                                    </div>
                                </div>
                                <br />
                                <div class="table-container">
                                    <div id="overlay" class="overlay">
                                        <table width="100%" id="itemGrid1" class='table table-bordered'>
                                            <thead>
                                                <tr>
                                                    <th style="text-align:center;">CHARGE<span class="text-danger">*</span></th>
                                                    <th style="text-align:center;">AMOUNT<span class="text-danger">*</span></th>
                                                    <th style="text-align:center;">REMARKS</th>
                                                </tr>
                                            </thead>
                                            <tbody id="itemTableBody">
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                                <div class="row" style="padding-top:10px">
                                    <div class="col-sm-1">
                                        <button class="btn btn-outline-primary" id="btnAddrow1">Add More Rows</button>
                                    </div>
                                </div>
                            </div>
                            <label class="form-label">RECEIPT 2</label>
                            <div style="border: 2px solid black;padding: 10px">
                                <div class="row">
                                    <div class="col-sm-1 alignright">
                                        <label class="form-label" for="receiptNo">RECEIPT NO 2</label>
                                    </div>
                                    <div class="col-sm-2">
                                        <input type="text" class="form-control rounded-0" name="RECEIPTNO" id="receiptNo2" />
                                    </div>
                                    <div class="col-sm-1 alignright">
                                        <label class="form-label" for="receiptDate">DATE</label>
                                    </div>
                                    <div class="col-sm-1">
                                        <input type="date" class="form-control rounded-0" name="RECEIPTDATE" id="receiptDate2" />
                                    </div>
                                    <div class="col-sm-1 alignright">
                                        <label class="form-label" for="amount">AMOUNT</label>
                                    </div>
                                    <div class="col-sm-1">
                                        <input type="text" oninput="validateNumericInput(this);" maxlength="@t5TBLength" class="form-control rounded-0" name="AMOUNT" id="amount2" />
                                    </div>
                                    <div class="col-sm-1 alignright">
                                        <label class="form-label" for="remarks1rec">REMARKS</label>
                                    </div>
                                    <div class="col-sm-2">
                                        <input type="text" class="form-control rounded-0 toUpperCaseString" maxlength="@t4TBLength" name="REMARKS1" id="remarks1rec2" />
                                    </div>
                                    <div class="col-sm-1 alignright">
                                        <label class="form-label">ATTACHMENTS</label>
                                    </div>
                                    <div class="col-sm-1">
                                        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalCenter2">
                                            <i class="fa fa-paperclip" aria-hidden="true"></i>
                                        </button>
                                    </div>
                                </div>
                                <br />
                                <div class="table-container">
                                    <table width="100%" id="itemGrid2" class='table table-bordered'>
                                        <thead>
                                            <tr>
                                                <th style="text-align:center;">CHARGE</th>
                                                <th style="text-align:center;">AMOUNT</th>
                                                <th style="text-align:center;">REMARKS</th>
                                            </tr>
                                        </thead>
                                        <tbody id="itemTableBody">
                                        </tbody>
                                    </table>
                                </div>
                                <div class="row" style="padding-top:10px">
                                    <div class="col-sm-1">
                                        <button class="btn btn-outline-primary" id="btnAddrow2">Add More Rows</button>
                                    </div>
                                </div>
                            </div>
                            @* <table width="100%" id="itemGrid" class='table table-bordered'>
                            <thead>
                            <tr>
                            <th style="text-align: center;">NO</th>
                            <th style="text-align: center;">CHARGE</th>
                            <th style="text-align: center;">AMOUNT</th>
                            <th style="text-align: center;">REMARKS</th>
                            </tr>
                            </thead>
                            <tbody id="itemTableBody">
                            </tbody>
                            </table>
                            <br /> *@
                        </div>
                        <div class="row" style="padding-top:20px">
                            <div class="col-md-1">
                                <button class="btn btn-primary" id="btnAdd">Submit</button>
                            </div>
                            <div id="exception1" style="display:none" class="col-sm-2 alignright">
                                <label class="form-label" style="white-space:nowrap" for="exceptionalremarks">EXCEPTIONAL REMARKS<span class="text-danger">*</span></label>
                            </div>
                            <div id="exception2" style="display:none" class="col-sm-3">
                                <input type="text" class="form-control rounded-0" maxlength="@t4TBLength" name="EXCEPTIONALREMARKS" id="exceptionalremarks" />
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@* Start Model *@
<div class="modal fade" id="exampleModalCenter1" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Attach Files</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @* Start Model Body *@
                <div class="row">
                    <div class="col-md-12"><input class="form-control fileUpload" type="file" id="fileUpload1" /></div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-12"><input class="form-control fileUpload" type="file" id="fileUpload2" /></div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-12"><input class="form-control fileUpload" type="file" id="fileUpload3" /></div>
                </div>
                @* End Model Body *@
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Upload</button>
            </div>
        </div>
    </div>
</div>
@* End Model *@
@* Start Model *@
<div class="modal fade" id="exampleModalCenter2" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Attach Files</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @* Start Model Body *@
                <div class="row">
                    <div class="col-md-12"><input class="form-control fileUpload" type="file" id="fileUpload11" /></div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-12"><input class="form-control fileUpload" type="file" id="fileUpload22" /></div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-12"><input class="form-control fileUpload" type="file" id="fileUpload33" /></div>
                </div>
                @* End Model Body *@
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Upload</button>
            </div>
        </div>
    </div>
</div>
@* End Model *@

<script type="text/javascript">

    var Requestnos = [];
    var detailsofrequestno = [];
    var CHARGESData;
    var requestid;

    $(document).ready(async function () {

        await BindRequestnos();
        await Requestnodropdown(Requestnos);
        await Chargesdata();
        await Addrows1();
        await Addrows2();

        $('#requestNo').chosen({
            width: '100%' // Ensure the chosen dropdown is 100% width
        });


        //ref date flatpicker initialization

        flatpickr("#tranDate", {
            dateFormat: "@dateFormat",
            altInput: true,
            allowInput: true,
            altFormat: "@dateFormat",
            maxDate: new Date(),
            defaultDate: new Date() // You can set the default date here
        });
        flatpickr("#receiptDate1", {
            dateFormat: "@dateFormat",
            altInput: true,
            allowInput: true,
            altFormat: "@dateFormat",
            maxDate: new Date(),
            defaultDate: new Date() // You can set the default date here
        });
        flatpickr("#receiptDate2", {
            dateFormat: "@dateFormat",
            altInput: true,
            allowInput: true,
            altFormat: "@dateFormat",
            maxDate: new Date(),
            defaultDate: new Date() // You can set the default date here
        });
    });

    function Flatpicker(defaultDateValue) {
        flatpickr("#requestDate", {
            dateFormat: "@dateFormatForbinding", // Set the desired format for input (YYYY-MM-DD)
            altInput: true,
            altFormat: "@dateFormat", // Set the format for the alternative input display (14-Jun-2024)
            maxDate: new Date(),
            defaultDate: defaultDateValue // Ensure defaultDate is set to 'YYYY-MM-DD' format
        });
    }

    // $('#Adddetailsofcharges').change(async function () {
    //     debugger
    //     if (this.checked) {
    //         // Get values from CHARGE 1 and AMOUNT 1
    //         var charge1 = $('#charge1').val();
    //         var amount1 = $('#amount1').val();

    //         // Append a new row to the table body
    //         $('#itemTableBody').append(
    //             '<tr>' +
    //             '<td>1</td>' + // Assuming you want a sequential number
    //             '<td>' + charge1 + '</td>' +
    //             '<td>' + amount1 + '</td>' +
    //             '<td>Remarks</td>' + // You can add remarks or leave it blank
    //             '</tr>'
    //         );
    //         var charge2 = $('#charge2').val();
    //         var amount2 = $('#amount2').val();
    //         if (charge2 != '') {
    //             $('#itemTableBody').append(
    //                 '<tr>' +
    //                 '<td>1</td>' + // Assuming you want a sequential number
    //                 '<td>' + charge2 + '</td>' +
    //                 '<td>' + amount2 + '</td>' +
    //                 '<td>Remarks</td>' + // You can add remarks or leave it blank
    //                 '</tr>'
    //             );
    //         } else {
    //             $('#itemTableBody').html('')
    //         }
    //     }
    // });

    $('#amount1, #amount2').on('input', function () {
        var amount1 = parseFloat($('#amount1').val()) || 0;
        var amount2 = parseFloat($('#amount2').val()) || 0;
        var totalRequestAmount = parseFloat($('#totalRequestamount').val()) || 0;

        if (amount1 + amount2 > totalRequestAmount) {
            $('#exception1').show();
            $('#exception2').show();
        } else {
            $('#exception1').hide();
            $('#exception2').hide();
        }
    });

    $('#requestNo').change(async function () {
        var selectedId = this.value;
        requestid = this.value;
        try {
            let data = await $.ajax({
                url: '@Url.Action("GetdetailsByRequestid", "PAYMENTHDR")',
                type: 'Get',
                data: { Hdrid: selectedId }
            });
            detailsofrequestno = data;
            var dateString = data[0].requestdate
            var Formateddate = dateString.split('T')[0]
            Flatpicker(Formateddate);
            $('#totalRequestamount').val(data[0].totalrequestamount);
            $('#jobNo').val(data[0].jobno);


        } catch (error) {
            console.log(error);
        }
    });

    async function Requestnodropdown(Requestnodata) {
        const dropdown = document.getElementById("requestNo");
        dropdown.innerHTML = "<option value=''>--SELECT REQUEST NO--</option>";

        Requestnodata.forEach(item => {
            const option = document.createElement("option");
            option.value = item.id;
            option.text = `${item.requestno}`;
            dropdown.appendChild(option);
        });
        $('#requestNo').trigger("chosen:updated")
    }

    async function BindRequestnos() {

        try {
            let data = await $.ajax({
                url: '@Url.Action("GetRequestnos", "PAYMENTHDR")',
                type: 'Get'
            });
            Requestnos = data

        } catch (error) {
            console.log(error);
        }
    }

    async function Chargesdata() {
        CHARGESData = await $.ajax({
            url: '@Url.Action("GetCharges", "MasterCHARGES")',
            type: 'get',
        });
    }

    function addRow1() {
        const table = document.querySelector('#itemGrid1 tbody');
        const newRow = document.createElement('tr');

        newRow.innerHTML = `
           <td>
               <select name="CHARGE" class="status-dropdown chosen-select" style="width: 100%;">
                   <option value="">--SELECT CHARGE--</option>
                   ${CHARGESData.map(item => `<option value="${item.id}">${item.type} - [${item.type}]</option>`).join('')}
               </select>
           </td>
           <td><input name="AMOUNT" type="text" name="reviewerComment" oninput="validateNumericInput(this);" class="chosen-border form-control rounded-0 maxLengthValidation" maxlength="@t5TBLength"></td>
               <td><input type="text" name="REMARKS1" class="chosen-border form-control rounded-0 maxLengthValidation toUpperCaseString" maxlength="@t4TBLength"></td>
       `;

        table.appendChild(newRow);
        $('.chosen-select').chosen();
        $('.chosen-container').css('width', '100%'); // Ensures the chosen container takes full width
        $('.date-picker').flatpickr({
            dateFormat: "@dateFormat",
            defaultDate: new Date()
        });
        $('.toUpperCaseString').on('input paste', function () {
            $(this).val($(this).val().toLocaleUpperCase());
        });

        $('.toUpperCaseString').on('input', function () {
            $(this).val($(this).val().toLocaleUpperCase());
        });
    }

    function addRow2() {
        const table = document.querySelector('#itemGrid2 tbody');
        const newRow = document.createElement('tr');

        newRow.innerHTML = `
           <td>
               <select name="CHARGE" class="status-dropdown chosen-select" style="width: 100%;">
                   <option value="">--SELECT CHARGE--</option>
                   ${CHARGESData.map(item => `<option value="${item.id}">${item.name} - [${item.type}]</option>`).join('')}
               </select>
           </td>
           <td><input name="AMOUNT" type="text" name="reviewerComment" oninput="validateNumericInput(this);" class="chosen-border form-control rounded-0 maxLengthValidation" maxlength="@t5TBLength"></td>
               <td><input type="text" name="REMARKS1" class="chosen-border form-control rounded-0 maxLengthValidation toUpperCaseString" maxlength="@t4TBLength"></td>
       `;

        table.appendChild(newRow);
        $('.chosen-select').chosen();
        $('.chosen-container').css('width', '100%'); // Ensures the chosen container takes full width
        $('.date-picker').flatpickr({
            dateFormat: "@dateFormat",
            defaultDate: new Date()
        });
        $('.toUpperCaseString').on('input paste', function () {
            $(this).val($(this).val().toLocaleUpperCase());
        });

        $('.toUpperCaseString').on('input', function () {
            $(this).val($(this).val().toLocaleUpperCase());
        });
    }

    function validateNumericInput(input) {
        input.value = input.value.replace(/[^0-9.]/g, ''); // Allow digits and decimal points
        if ((input.value.match(/\./g) || []).length > 1) {
            input.value = input.value.slice(0, -1); // Remove the extra decimal point if more than one exists
        }
    }

    async function Addrows1() {
        for (let i = 0; i < 5; i++) {
            await addRow1();
        }
    }
    async function Addrows2() {
        for (let i = 0; i < 5; i++) {
            await addRow2();
        }
    }

    $('#btnAddrow1').on('click', async function () {
        event.preventDefault();
        for (let i = 0; i < 5; i++) {
            await addRow1();
        }
    });

    $('#btnAddrow2').on('click', async function () {
        event.preventDefault();
        for (let i = 0; i < 5; i++) {
            await addRow2();
        }
    });

    function validateForm() {
        let isValid = true;

        if ($('#tranNo').val() == '' || $('#tranDate').val() == '' || $('#requestNo').val() == '' || $('#receiptNo1').val() == '' || $('#receiptDate1').val() == '' || $('#amount1').val() == '') {

            isValid = false;
            return isValid;
        }

        const firstRow = document.querySelector('#itemGrid1 tbody tr:first-child');
        if (firstRow) {
            const charge = firstRow.querySelector('select[name="CHARGE"]').value;
            const amount = firstRow.querySelector('input[name="AMOUNT"]').value;
            const remarks = firstRow.querySelector('input[name="REMARKS1"]').value;

            if (charge == '' || amount == '') {
                isValid = false;
                return isValid;
            }
        }

        const rows = document.querySelectorAll('#itemGrid1 tbody tr');

        for (let i = 0; i < rows.length; i++) {
            const row = rows[i];
            const charge = row.querySelector('select[name="CHARGE"]').value;
            const amount = row.querySelector('input[name="AMOUNT"]').value;
            const remarks1 = row.querySelector('input[name="REMARKS1"]').value;

            if (charge == '' && amount == '') {
                row.remove();
            } else {
                if ((charge !== '' && amount == '') || (charge == '' && amount !== '')) {
                    isValid = false;
                    return isValid;
                }
            }
        }

        if ($('#receiptNo2').val() !== '' || $('#amount2').val() !== '') {
            if ($('#receiptNo2').val() == '' || $('#receiptDate2').val() == '' || $('#amount2').val() == '') {

                isValid = false;
                return isValid;
            }

            const firstRow = document.querySelector('#itemGrid2 tbody tr:first-child');
            if (firstRow) {
                const charge = firstRow.querySelector('select[name="CHARGE"]').value;
                const amount = firstRow.querySelector('input[name="AMOUNT"]').value;
                const remarks = firstRow.querySelector('input[name="REMARKS1"]').value;

                if (charge == '' || amount == '') {
                    isValid = false;
                    return isValid;
                }
            }

            const rows = document.querySelectorAll('#itemGrid2 tbody tr');

            for (let i = 0; i < rows.length; i++) {
                const row = rows[i];
                const charge = row.querySelector('select[name="CHARGE"]').value;
                const amount = row.querySelector('input[name="AMOUNT"]').value;
                const remarks1 = row.querySelector('input[name="REMARKS1"]').value;

                if (charge == '' && amount == '') {
                    row.remove();
                } else {
                    if ((charge !== '' && amount == '') || (charge == '' && amount !== '')) {
                        isValid = false;
                        return isValid;
                    }
                }
            }
        }
        return isValid;
    }

    function validateTotalAmount1() {
        let isValid = true;
        const mainAmount = parseFloat(document.getElementById('amount1').value) || 0;
        const tableAmounts = document.querySelectorAll('#itemGrid1 tbody input[name="AMOUNT"]');
        let totalAmount = 0;
        tableAmounts.forEach(input => {
            totalAmount += parseFloat(input.value) || 0;
        });

        if (totalAmount !== mainAmount) {
            isValid = false;
            return isValid;
        }
        return isValid;
    }

    function validateTotalAmount2() {
        let isValid = true;
        const mainAmount = parseFloat(document.getElementById('amount2').value) || 0;
        const tableAmounts = document.querySelectorAll('#itemGrid2 tbody input[name="AMOUNT"]');
        let totalAmount = 0;
        tableAmounts.forEach(input => {
            totalAmount += parseFloat(input.value) || 0;
        });

        if (totalAmount !== mainAmount) {
            isValid = false;
            return isValid;
        }
        return isValid;
    }

    function checkDisplayofexception() {
        let isValid = true;
        var exception1 = document.getElementById('exception1');

        // Check if the exception1 div is displayed
        if (window.getComputedStyle(exception1).display === 'block') {
            if ($('#exceptionalremarks').val() == '') {
                isValid = false;
                return isValid;
            }
        } 
        return isValid;
    }

    $('#btnAdd').on('click', async function () {
        event.preventDefault();
        if (!validateForm() || !checkDisplayofexception()) {
            alert('Please fill all the required fields.')
            return;
        }

        if (!validateTotalAmount1()) {
            alert('The total amount of charges present in receipt does not match the receipt 1 amount.')
            return;
        }
        if ($('#receiptNo2').val() !== '') {
            if (!validateTotalAmount2()) {
                alert('The total amount of charges present in receipt does not match the receipt 2 amount.')
                return;
            }
        }
        debugger

        var status = "";
        var amount1forex = parseFloat($('#amount1').val()) || 0;
        var amount2forex = parseFloat($('#amount2').val()) || 0;
        var totalRequestAmountforex = parseFloat($('#totalRequestamount').val()) || 0;

        if (amount1forex + amount2forex > totalRequestAmountforex) {
            status = 'Exception'
        } else {
            status = ''
        }

        var headerdata1 = {
            TRANNO: $('#tranNo').val(),
            TRANDATE: $('#tranDate').val(),
            REQUESTID: requestid,
            REMARKS1: $('#remarks1').val(),
            REMARKS2: $('#remarks2').val(),
            PAIDBY: "@userName",
            STATUS: status,
            EXCEPTIONALREMARKS: $('#exceptionalremarks').val(),
        }
        const res1 = await $.ajax({
            url: '@Url.Action("SavePAYMENTHDR", "PAYMENTHDR")',
            method: 'POST',
            data: headerdata1
        });

        const PAYMENTHDRID = res1.hdrid;
        var headerdata2 = {
            HDRID: PAYMENTHDRID,
            REQUESTID: requestid,
            RECEIPTNO: $('#receiptNo1').val(),
            RECEIPTDATE: $('#receiptDate1').val(),
            RECEIPTAMOUNT: $('#amount1').val(),
            REMARKS1: $('#remarks1rec1').val()
        }
        const res2 = await $.ajax({
            url: '@Url.Action("SavePAYMENTRECEIPTS", "PAYMENTRECEIPTS")',
            method: 'POST',
            data: headerdata2
        });
        debugger
        const PAYMENTRECEIPTID = res2.hdrid;

        await uploadFile1(PAYMENTRECEIPTID);
        await uploadFile2(PAYMENTRECEIPTID);
        await uploadFile3(PAYMENTRECEIPTID);

        const rows = document.querySelectorAll('#itemGrid1 tbody tr');
        rows.forEach(async (row) => {
            const charge = row.querySelector('select[name="CHARGE"]').value;
            const amount = row.querySelector('input[name="AMOUNT"]').value;
            const remarks1 = row.querySelector('input[name="REMARKS1"]').value;

            let hasValues = false;

            if (charge !== '' && amount !== '') {
                hasValues = true;
            } else {
                row.remove();
            }

            if (hasValues) {

                var headerdata3 = {
                    CHARGETYPEID: charge,
                    AMOUNT: amount,
                    REMARKS1: remarks1,
                    PAYMENTHDRID: PAYMENTHDRID,
                    PAYMENTRECEIPTID: PAYMENTRECEIPTID,
                    REQUESTID: requestid,

                };

                await $.ajax({
                    url: '@Url.Action("SavePAYMENTRECEIPTCHARGES", "PAYMENTRECEIPTCHARGES")',
                    method: 'POST',
                    data: headerdata3
                });
            }
        });

        const PAYMENTHDRID2 = res1.hdrid;
        var headerdata22 = {
            HDRID: PAYMENTHDRID2,
            REQUESTID: requestid,
            RECEIPTNO: $('#receiptNo2').val(),
            RECEIPTDATE: $('#receiptDate2').val(),
            RECEIPTAMOUNT: $('#amount2').val(),
            REMARKS1: $('#remarks1rec2').val()
        }
        const res22 = await $.ajax({
            url: '@Url.Action("SavePAYMENTRECEIPTS", "PAYMENTRECEIPTS")',
            method: 'POST',
            data: headerdata22
        });

        const PAYMENTRECEIPTID2 = res22.hdrid;

        await uploadFile11(PAYMENTRECEIPTID2);
        await uploadFile22(PAYMENTRECEIPTID2);
        await uploadFile33(PAYMENTRECEIPTID2);

        const rows2 = document.querySelectorAll('#itemGrid2 tbody tr');
        rows2.forEach(async (row) => {
            const charge = row.querySelector('select[name="CHARGE"]').value;
            const amount = row.querySelector('input[name="AMOUNT"]').value;
            const remarks1 = row.querySelector('input[name="REMARKS1"]').value;

            let hasValues = false;

            if (charge !== '' && amount !== '') {
                hasValues = true;
            } else {
                row.remove();
            }

            if (hasValues) {

                var headerdata3 = {
                    CHARGETYPEID: charge,
                    AMOUNT: amount,
                    REMARKS1: remarks1,
                    PAYMENTHDRID: PAYMENTHDRID2,
                    PAYMENTRECEIPTID: PAYMENTRECEIPTID2,
                    REQUESTID: requestid,

                };

                await $.ajax({
                    url: '@Url.Action("SavePAYMENTRECEIPTCHARGES", "PAYMENTRECEIPTCHARGES")',
                    method: 'POST',
                    data: headerdata3
                });
            }
        });
    });

    async function uploadFile1(headerId) {

        var files = document.getElementById("fileUpload1").files;

        if (files.length === 0) {
            return;
        }

        for (let i = 0; i < files.length; i++) {
            debugger;
            var formData = new FormData();
            formData.append('file', files[i]);
            formData.append('typeId', '2');
            formData.append('transName', 'PaymentProcessing');

            try {
                await $.ajax({
                    url: "@Url.Action("SaveFile", "Home")",
                    type: "POST",
                    headers: { 'ProdId': headerId },
                    data: formData,
                    contentType: false,
                    processData: false
                });
                console.log("File uploaded successfully:", files[i].name);
            } catch (error) {
                console.error("Error uploading file:", error);
            }
        }
    }

    async function uploadFile2(headerId) {

        var files = document.getElementById("fileUpload2").files;

        if (files.length === 0) {
            return;
        }

        for (let i = 0; i < files.length; i++) {
            debugger;
            var formData = new FormData();
            formData.append('file', files[i]);
            formData.append('typeId', '3');
            formData.append('transName', 'PaymentProcessing');

            try {
                await $.ajax({
                    url: "@Url.Action("SaveFile", "Home")",
                    type: "POST",
                    headers: { 'ProdId': headerId },
                    data: formData,
                    contentType: false,
                    processData: false
                });
                console.log("File uploaded successfully:", files[i].name);
            } catch (error) {
                console.error("Error uploading file:", error);
            }
        }
    }

    async function uploadFile3(headerId) {

        var files = document.getElementById("fileUpload3").files;

        if (files.length === 0) {
            return;
        }

        for (let i = 0; i < files.length; i++) {
            debugger;
            var formData = new FormData();
            formData.append('file', files[i]);
            formData.append('typeId', '4');
            formData.append('transName', 'PaymentProcessing');

            try {
                await $.ajax({
                    url: "@Url.Action("SaveFile", "Home")",
                    type: "POST",
                    headers: { 'ProdId': headerId },
                    data: formData,
                    contentType: false,
                    processData: false
                });
                console.log("File uploaded successfully:", files[i].name);
            } catch (error) {
                console.error("Error uploading file:", error);
            }
        }
    }

    async function uploadFile11(headerId) {

        var files = document.getElementById("fileUpload11").files;

        if (files.length === 0) {
            return;
        }

        for (let i = 0; i < files.length; i++) {
            debugger;
            var formData = new FormData();
            formData.append('file', files[i]);
            formData.append('typeId', '2');
            formData.append('transName', 'PaymentProcessing');

            try {
                await $.ajax({
                    url: "@Url.Action("SaveFile", "Home")",
                    type: "POST",
                    headers: { 'ProdId': headerId },
                    data: formData,
                    contentType: false,
                    processData: false
                });
                console.log("File uploaded successfully:", files[i].name);
            } catch (error) {
                console.error("Error uploading file:", error);
            }
        }
    }

    async function uploadFile22(headerId) {

        var files = document.getElementById("fileUpload22").files;

        if (files.length === 0) {
            return;
        }

        for (let i = 0; i < files.length; i++) {
            debugger;
            var formData = new FormData();
            formData.append('file', files[i]);
            formData.append('typeId', '3');
            formData.append('transName', 'PaymentProcessing');

            try {
                await $.ajax({
                    url: "@Url.Action("SaveFile", "Home")",
                    type: "POST",
                    headers: { 'ProdId': headerId },
                    data: formData,
                    contentType: false,
                    processData: false
                });
                console.log("File uploaded successfully:", files[i].name);
            } catch (error) {
                console.error("Error uploading file:", error);
            }
        }
    }

    async function uploadFile33(headerId) {

        var files = document.getElementById("fileUpload33").files;

        if (files.length === 0) {
            return;
        }

        for (let i = 0; i < files.length; i++) {
            debugger;
            var formData = new FormData();
            formData.append('file', files[i]);
            formData.append('typeId', '4');
            formData.append('transName', 'PaymentProcessing');

            try {
                await $.ajax({
                    url: "@Url.Action("SaveFile", "Home")",
                    type: "POST",
                    headers: { 'ProdId': headerId },
                    data: formData,
                    contentType: false,
                    processData: false
                });
                console.log("File uploaded successfully:", files[i].name);
            } catch (error) {
                console.error("Error uploading file:", error);
            }
        }
    }

    $('.toUpperCaseString').on('input paste', function () {
        $(this).val($(this).val().toLocaleUpperCase());
    });

    $('.toUpperCaseString').on('input', function () {
        $(this).val($(this).val().toLocaleUpperCase());
    });

</script>